/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinal;

import java.awt.Color;
import java.awt.Image;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.media.Buffer;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.AMFC.imagen.AumentarAzul;
import sm.AMFC.imagen.SepiaOp;
import sm.AMFC.imagen.UmbralizacionOp;
import sm.AMFC.iu.Lienzo2D;
import sm.image.BlendOp;
import sm.image.ImageTools;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SubtractionOp;

/**
 *
 * Clase que contiene todos los botones de la interfaz y en la cual el usuario 
 * interactuará con la interfaz. Esta ventana contiene todos los botones
 * para reproducir audio, reproducir video, grabar sonidos, modificar imágenes y dibujar sobre
 * ellas, además de las ventanas para mostrar los correspondientes archivos que desee abrir el
 * usuario.
 * Para la proxima entrega, quiero introducir los botones necesarios para abrir la web cam, 
 * algunos botones para figuras, acciones sobre las imágenes, una barra de estado de reproducción.
 * 
 * @author Antonio Manuel Fernández Cantos.
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Atributo de tipo BufferedImage que almacena una imagen. Lo usaremos
     * para almacenar imagenes cuando realicemos operaciones con el slider.
     */
    private BufferedImage imgSource1;
    /**
     * Atributo de tipo BufferedImagen que almacena una imagen. Lo usaremos para
     * almacenar imagenes cuando realicemos operaciones con el slider binario.
     */
    private BufferedImage imgSource2;
    /**
     * Atributo de tipo VentanaInternaImagen, lo usaremos cuando necesitomos
     * realizar operaciones con imagenes usando el slider.
     */
    private VentanaInternaImagen ventanaActual;
    /**
     * Atributo de tipo VentanaInternaImagen, lo usaremos cuando necesitomos
     * realizar operaciones con imagenes usando el slider.
     */
    private VentanaInternaImagen ventanaSecundaria;

    /**
     * Constructor de la clase en la cual inicializa todos los atributos de la clase
     * a null. También añade los botones de reproducción y pausa para que en función
     * del uso de cada botón, muestre una imagen o otra.
     */
    public VentanaPrincipal() {
        initComponents();
        imgSource1 = null;
        imgSource2 = null;
        ventanaActual = null;
        ventanaSecundaria = null;

        // Creamos la forma de los botones reproducir y parar dependiendo del
        // su estado.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        grupoFiguras = new javax.swing.ButtonGroup();
        grupoColores = new javax.swing.ButtonGroup();
        botonReproduccion = new javax.swing.ButtonGroup();
        panelInferior = new javax.swing.JPanel();
        panelReproduccion = new javax.swing.JPanel();
        panelReporducirParar = new javax.swing.JPanel();
        botonPlay = new javax.swing.JToggleButton();
        botonStop = new javax.swing.JToggleButton();
        panelGrabar = new javax.swing.JPanel();
        botonGrabar = new javax.swing.JToggleButton();
        panelEstado = new javax.swing.JPanel();
        estado = new javax.swing.JLabel();
        pixelColor = new javax.swing.JLabel();
        panelManipularImagenes = new javax.swing.JPanel();
        panelBrillo = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        panelContrasteYEscala = new javax.swing.JPanel();
        panelContraste = new javax.swing.JPanel();
        contrasteNormal = new javax.swing.JButton();
        contasteOscurecido = new javax.swing.JButton();
        contrasteIluminado = new javax.swing.JButton();
        panelEscala = new javax.swing.JPanel();
        botonEscalaIncrementar = new javax.swing.JButton();
        botonEscalaReducir = new javax.swing.JButton();
        panelFiltroYSepia = new javax.swing.JPanel();
        panelFiltro = new javax.swing.JPanel();
        botonFiltro = new javax.swing.JComboBox<>();
        panelSepia = new javax.swing.JPanel();
        botonSepia = new javax.swing.JButton();
        panelOperaciones = new javax.swing.JPanel();
        botonSuma = new javax.swing.JButton();
        botonResta = new javax.swing.JButton();
        sliderBinario = new javax.swing.JSlider();
        panelUmbralizacion = new javax.swing.JPanel();
        sliderUmbralizacion = new javax.swing.JSlider();
        panelGiro = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        panelTransformaciones = new javax.swing.JPanel();
        comboboxTransformaciones = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        botonDuplicarImagen = new javax.swing.JButton();
        panelSuperior = new javax.swing.JPanel();
        panelOperacionesFichero = new javax.swing.JPanel();
        botonBarraNuevo = new javax.swing.JButton();
        botonBarraAbrir = new javax.swing.JButton();
        botonBarraGuardar = new javax.swing.JButton();
        botonCamara = new javax.swing.JButton();
        botonCaptura = new javax.swing.JButton();
        panelFormas = new javax.swing.JPanel();
        botonPunto = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonElipse = new javax.swing.JToggleButton();
        botonPoligono = new javax.swing.JToggleButton();
        botonCurva = new javax.swing.JToggleButton();
        botonEditar = new javax.swing.JToggleButton();
        panelColores = new javax.swing.JPanel();
        colorNegro = new javax.swing.JToggleButton();
        colorBlanco = new javax.swing.JToggleButton();
        colorRojo = new javax.swing.JToggleButton();
        colorAmarillo = new javax.swing.JToggleButton();
        colorVerde = new javax.swing.JToggleButton();
        colorAzul = new javax.swing.JToggleButton();
        panelAtributos = new javax.swing.JPanel();
        spinnerGrosor = new javax.swing.JSpinner();
        botonLineaDiscontinua = new javax.swing.JToggleButton();
        botonRelleno = new javax.swing.JToggleButton();
        botonDegradado = new javax.swing.JToggleButton();
        botonTransparencia = new javax.swing.JToggleButton();
        botonAlisar = new javax.swing.JToggleButton();
        escritorio = new javax.swing.JDesktopPane();
        ventanaError = new javax.swing.JOptionPane();
        ventanaEleccionTam = new javax.swing.JOptionPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        botonArchivo = new javax.swing.JMenu();
        botonNuevo = new javax.swing.JMenuItem();
        botonAbrir = new javax.swing.JMenuItem();
        botonGuardar = new javax.swing.JMenuItem();
        menuGrabarAudio = new javax.swing.JMenuItem();
        ver = new javax.swing.JMenu();
        verBarraDibujo = new javax.swing.JCheckBoxMenuItem();
        verBarraImagenes = new javax.swing.JCheckBoxMenuItem();
        verBarraReproduccion = new javax.swing.JCheckBoxMenuItem();
        verBarraEstado = new javax.swing.JCheckBoxMenuItem();
        botonAyuda = new javax.swing.JMenu();
        botonAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelInferior.setMaximumSize(new java.awt.Dimension(32767, 60));
        panelInferior.setMinimumSize(new java.awt.Dimension(200, 60));
        panelInferior.setPreferredSize(new java.awt.Dimension(200, 60));
        panelInferior.setLayout(new java.awt.BorderLayout(2, 2));

        panelReproduccion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelReproduccion.setMaximumSize(new java.awt.Dimension(142, 30));
        panelReproduccion.setMinimumSize(new java.awt.Dimension(142, 30));
        panelReproduccion.setPreferredSize(new java.awt.Dimension(142, 30));
        panelReproduccion.setLayout(new javax.swing.BoxLayout(panelReproduccion, javax.swing.BoxLayout.LINE_AXIS));

        panelReporducirParar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelReporducirParar.setMaximumSize(new java.awt.Dimension(100, 40));
        panelReporducirParar.setMinimumSize(new java.awt.Dimension(100, 40));
        panelReporducirParar.setPreferredSize(new java.awt.Dimension(100, 40));
        panelReporducirParar.setLayout(new javax.swing.BoxLayout(panelReporducirParar, javax.swing.BoxLayout.LINE_AXIS));

        botonReproduccion.add(botonPlay);
        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/reproducir 16x16.png"))); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonPlay, org.jdesktop.beansbinding.ELProperty.create("Reproduce el audio seleccionado."), botonPlay, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPlayActionPerformed(evt);
            }
        });
        panelReporducirParar.add(botonPlay);

        botonReproduccion.add(botonStop);
        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stopActivado.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonStop, org.jdesktop.beansbinding.ELProperty.create("Para la reproducción de audio."), botonStop, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStopActionPerformed(evt);
            }
        });
        panelReporducirParar.add(botonStop);

        panelReproduccion.add(panelReporducirParar);

        panelGrabar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelGrabar.setMaximumSize(new java.awt.Dimension(60, 40));
        panelGrabar.setMinimumSize(new java.awt.Dimension(60, 40));
        panelGrabar.setPreferredSize(new java.awt.Dimension(60, 40));
        panelGrabar.setLayout(new javax.swing.BoxLayout(panelGrabar, javax.swing.BoxLayout.LINE_AXIS));

        botonGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stopDesactivado.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonGrabar, org.jdesktop.beansbinding.ELProperty.create("Graba/para la grabación de audio."), botonGrabar, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });
        panelGrabar.add(botonGrabar);

        panelReproduccion.add(panelGrabar);

        panelInferior.add(panelReproduccion, java.awt.BorderLayout.CENTER);

        panelEstado.setMaximumSize(new java.awt.Dimension(32767, 30));
        panelEstado.setMinimumSize(new java.awt.Dimension(84, 30));
        panelEstado.setPreferredSize(new java.awt.Dimension(84, 30));
        panelEstado.setLayout(new java.awt.GridLayout(1, 0));

        estado.setText("Estado");
        panelEstado.add(estado);
        panelEstado.add(pixelColor);

        panelInferior.add(panelEstado, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(panelInferior, java.awt.BorderLayout.PAGE_END);

        panelManipularImagenes.setMaximumSize(new java.awt.Dimension(230, 32767));
        panelManipularImagenes.setMinimumSize(new java.awt.Dimension(230, 1431324));
        panelManipularImagenes.setPreferredSize(new java.awt.Dimension(230, 12312));
        panelManipularImagenes.setLayout(new java.awt.GridLayout(8, 1));

        panelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        panelBrillo.setMaximumSize(new java.awt.Dimension(220, 80));
        panelBrillo.setMinimumSize(new java.awt.Dimension(220, 80));
        panelBrillo.setPreferredSize(new java.awt.Dimension(220, 80));
        panelBrillo.setLayout(new java.awt.BorderLayout());

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setValue(0);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderBrillo, org.jdesktop.beansbinding.ELProperty.create("Slider para ajustar el brillo. Cuanto más a la izquierda oscurece la imagen, a la derecha le da luminosidad."), sliderBrillo, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        panelBrillo.add(sliderBrillo, java.awt.BorderLayout.CENTER);

        panelManipularImagenes.add(panelBrillo);

        panelContrasteYEscala.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelContrasteYEscala.setMaximumSize(new java.awt.Dimension(140, 150));
        panelContrasteYEscala.setMinimumSize(new java.awt.Dimension(140, 150));
        panelContrasteYEscala.setPreferredSize(new java.awt.Dimension(140, 150));
        panelContrasteYEscala.setLayout(new javax.swing.BoxLayout(panelContrasteYEscala, javax.swing.BoxLayout.LINE_AXIS));

        panelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        panelContraste.setMaximumSize(new java.awt.Dimension(130, 80));
        panelContraste.setMinimumSize(new java.awt.Dimension(130, 80));
        panelContraste.setPreferredSize(new java.awt.Dimension(130, 80));
        panelContraste.setLayout(new javax.swing.BoxLayout(panelContraste, javax.swing.BoxLayout.LINE_AXIS));

        contrasteNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        contrasteNormal.setMaximumSize(new java.awt.Dimension(36, 38));
        contrasteNormal.setMinimumSize(new java.awt.Dimension(36, 38));
        contrasteNormal.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contrasteNormal, org.jdesktop.beansbinding.ELProperty.create("Operación de contraste normal sobre la imagen."), contrasteNormal, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        contrasteNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteNormalActionPerformed(evt);
            }
        });
        panelContraste.add(contrasteNormal);

        contasteOscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        contasteOscurecido.setMaximumSize(new java.awt.Dimension(36, 38));
        contasteOscurecido.setMinimumSize(new java.awt.Dimension(36, 38));
        contasteOscurecido.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contasteOscurecido, org.jdesktop.beansbinding.ELProperty.create("Operación de contraste oscurecido sobre la imagen."), contasteOscurecido, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        contasteOscurecido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contasteOscurecidoActionPerformed(evt);
            }
        });
        panelContraste.add(contasteOscurecido);

        contrasteIluminado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        contrasteIluminado.setMaximumSize(new java.awt.Dimension(36, 38));
        contrasteIluminado.setMinimumSize(new java.awt.Dimension(36, 38));
        contrasteIluminado.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contrasteIluminado, org.jdesktop.beansbinding.ELProperty.create("Operación de contraste iluminado sobre la imagen."), contrasteIluminado, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        contrasteIluminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteIluminadoActionPerformed(evt);
            }
        });
        panelContraste.add(contrasteIluminado);

        panelContrasteYEscala.add(panelContraste);

        panelEscala.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        panelEscala.setLayout(new javax.swing.BoxLayout(panelEscala, javax.swing.BoxLayout.LINE_AXIS));

        botonEscalaIncrementar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        botonEscalaIncrementar.setMaximumSize(new java.awt.Dimension(36, 38));
        botonEscalaIncrementar.setMinimumSize(new java.awt.Dimension(36, 38));
        botonEscalaIncrementar.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonEscalaIncrementar, org.jdesktop.beansbinding.ELProperty.create("Incrementa el tamaño de la imagen."), botonEscalaIncrementar, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonEscalaIncrementar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEscalaIncrementarActionPerformed(evt);
            }
        });
        panelEscala.add(botonEscalaIncrementar);

        botonEscalaReducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        botonEscalaReducir.setMaximumSize(new java.awt.Dimension(36, 38));
        botonEscalaReducir.setMinimumSize(new java.awt.Dimension(36, 38));
        botonEscalaReducir.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonEscalaReducir, org.jdesktop.beansbinding.ELProperty.create("Reduce el tamaño de la imagen."), botonEscalaReducir, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonEscalaReducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEscalaReducirActionPerformed(evt);
            }
        });
        panelEscala.add(botonEscalaReducir);

        panelContrasteYEscala.add(panelEscala);

        panelManipularImagenes.add(panelContrasteYEscala);

        panelFiltroYSepia.setMaximumSize(new java.awt.Dimension(220, 80));
        panelFiltroYSepia.setMinimumSize(new java.awt.Dimension(220, 80));
        panelFiltroYSepia.setPreferredSize(new java.awt.Dimension(220, 80));
        panelFiltroYSepia.setLayout(new javax.swing.BoxLayout(panelFiltroYSepia, javax.swing.BoxLayout.LINE_AXIS));

        panelFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        panelFiltro.setMaximumSize(new java.awt.Dimension(160, 140));
        panelFiltro.setMinimumSize(new java.awt.Dimension(160, 140));
        panelFiltro.setPreferredSize(new java.awt.Dimension(160, 140));
        panelFiltro.setLayout(new javax.swing.BoxLayout(panelFiltro, javax.swing.BoxLayout.LINE_AXIS));

        botonFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Emborronamiento", "Enfoque", "Relieve" }));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonFiltro, org.jdesktop.beansbinding.ELProperty.create("Tres filtros que corresponden con enfoque, relieve y emborronamiento."), botonFiltro, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFiltroActionPerformed(evt);
            }
        });
        panelFiltro.add(botonFiltro);

        panelFiltroYSepia.add(panelFiltro);

        panelSepia.setBorder(javax.swing.BorderFactory.createTitledBorder("Sepia"));
        panelSepia.setMaximumSize(new java.awt.Dimension(70, 80));
        panelSepia.setMinimumSize(new java.awt.Dimension(70, 80));
        panelSepia.setPreferredSize(new java.awt.Dimension(70, 80));
        panelSepia.setLayout(new javax.swing.BoxLayout(panelSepia, javax.swing.BoxLayout.LINE_AXIS));

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        botonSepia.setMaximumSize(new java.awt.Dimension(36, 38));
        botonSepia.setMinimumSize(new java.awt.Dimension(36, 38));
        botonSepia.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonSepia, org.jdesktop.beansbinding.ELProperty.create("Operación Sepia sobre una imagen."), botonSepia, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });
        panelSepia.add(botonSepia);

        panelFiltroYSepia.add(panelSepia);

        panelManipularImagenes.add(panelFiltroYSepia);

        panelOperaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Binarias"));
        panelOperaciones.setLayout(new javax.swing.BoxLayout(panelOperaciones, javax.swing.BoxLayout.LINE_AXIS));

        botonSuma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/suma.png"))); // NOI18N
        botonSuma.setMaximumSize(new java.awt.Dimension(36, 38));
        botonSuma.setMinimumSize(new java.awt.Dimension(36, 38));
        botonSuma.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonSuma, org.jdesktop.beansbinding.ELProperty.create("Operación sobre dos imagenes en la cual la segunda imagen seleccionada está debajo de una primera imagen seleccionada. El resultado se muestra en una imagen nueva."), botonSuma, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonSuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSumaActionPerformed(evt);
            }
        });
        panelOperaciones.add(botonSuma);

        botonResta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/resta.png"))); // NOI18N
        botonResta.setMaximumSize(new java.awt.Dimension(36, 38));
        botonResta.setMinimumSize(new java.awt.Dimension(36, 38));
        botonResta.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonResta, org.jdesktop.beansbinding.ELProperty.create("Operación sobre dos imagenes en la cual la segunda imagen seleccionada está encima de una primera imagen seleccionada. El resultado se muestra en una imagen nueva."), botonResta, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonResta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRestaActionPerformed(evt);
            }
        });
        panelOperaciones.add(botonResta);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderBinario, org.jdesktop.beansbinding.ELProperty.create("Operación sobre dos imágenes seleccionadas. Mezcla dos imágenes en función del valor del slider. El resultado se ve en una nueva imagen."), sliderBinario, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        sliderBinario.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBinarioStateChanged(evt);
            }
        });
        sliderBinario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBinarioFocusGained(evt);
            }
        });
        panelOperaciones.add(sliderBinario);

        panelManipularImagenes.add(panelOperaciones);

        panelUmbralizacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralizacion"));
        panelUmbralizacion.setLayout(new javax.swing.BoxLayout(panelUmbralizacion, javax.swing.BoxLayout.LINE_AXIS));

        sliderUmbralizacion.setMaximum(256);
        sliderUmbralizacion.setValue(128);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderUmbralizacion, org.jdesktop.beansbinding.ELProperty.create("Pone cada pixel de la imagen a blanco o negro en función del valor del umbral del slider."), sliderUmbralizacion, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        sliderUmbralizacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderUmbralizacionStateChanged(evt);
            }
        });
        sliderUmbralizacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderUmbralizacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderUmbralizacionFocusLost(evt);
            }
        });
        panelUmbralizacion.add(sliderUmbralizacion);

        panelManipularImagenes.add(panelUmbralizacion);

        panelGiro.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        panelGiro.setLayout(new javax.swing.BoxLayout(panelGiro, javax.swing.BoxLayout.LINE_AXIS));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setValue(180);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderRotacion, org.jdesktop.beansbinding.ELProperty.create("Rota la imagen en función del valor del slider."), sliderRotacion, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        panelGiro.add(sliderRotacion);

        panelManipularImagenes.add(panelGiro);

        panelTransformaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Transformaciones"));
        panelTransformaciones.setLayout(new javax.swing.BoxLayout(panelTransformaciones, javax.swing.BoxLayout.LINE_AXIS));

        comboboxTransformaciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Negativo", "Gris", "Aumentar Azul" }));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, comboboxTransformaciones, org.jdesktop.beansbinding.ELProperty.create("Tres transformaciones sobre una imagen seleccionada. La primera invierte los colores de la imagen. La segunda pone la imagen con niveles de gris y la tercera aplica azul a cada pixel."), comboboxTransformaciones, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        comboboxTransformaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxTransformacionesActionPerformed(evt);
            }
        });
        panelTransformaciones.add(comboboxTransformaciones);

        panelManipularImagenes.add(panelTransformaciones);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        botonDuplicarImagen.setText("Duplicar imagen");
        botonDuplicarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDuplicarImagenActionPerformed(evt);
            }
        });
        jPanel1.add(botonDuplicarImagen);

        panelManipularImagenes.add(jPanel1);

        getContentPane().add(panelManipularImagenes, java.awt.BorderLayout.LINE_END);

        panelSuperior.setMaximumSize(new java.awt.Dimension(800, 40));
        panelSuperior.setMinimumSize(new java.awt.Dimension(800, 40));
        panelSuperior.setPreferredSize(new java.awt.Dimension(800, 40));
        panelSuperior.setLayout(new javax.swing.BoxLayout(panelSuperior, javax.swing.BoxLayout.LINE_AXIS));

        panelOperacionesFichero.setMaximumSize(new java.awt.Dimension(220, 40));
        panelOperacionesFichero.setMinimumSize(new java.awt.Dimension(220, 40));
        panelOperacionesFichero.setPreferredSize(new java.awt.Dimension(220, 40));
        panelOperacionesFichero.setLayout(new javax.swing.BoxLayout(panelOperacionesFichero, javax.swing.BoxLayout.LINE_AXIS));

        botonBarraNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonBarraNuevo.setMaximumSize(new java.awt.Dimension(38, 38));
        botonBarraNuevo.setMinimumSize(new java.awt.Dimension(38, 38));
        botonBarraNuevo.setPreferredSize(new java.awt.Dimension(38, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonNuevo, org.jdesktop.beansbinding.ELProperty.create("Archivo nuevo."), botonBarraNuevo, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonBarraNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBarraNuevoActionPerformed(evt);
            }
        });
        panelOperacionesFichero.add(botonBarraNuevo);

        botonBarraAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonBarraAbrir.setMaximumSize(new java.awt.Dimension(40, 38));
        botonBarraAbrir.setMinimumSize(new java.awt.Dimension(40, 38));
        botonBarraAbrir.setPreferredSize(new java.awt.Dimension(40, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonArchivo, org.jdesktop.beansbinding.ELProperty.create("Abrir archivo."), botonBarraAbrir, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonBarraAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBarraAbrirActionPerformed(evt);
            }
        });
        panelOperacionesFichero.add(botonBarraAbrir);

        botonBarraGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonBarraGuardar.setMaximumSize(new java.awt.Dimension(38, 38));
        botonBarraGuardar.setMinimumSize(new java.awt.Dimension(38, 38));
        botonBarraGuardar.setPreferredSize(new java.awt.Dimension(38, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonGuardar, org.jdesktop.beansbinding.ELProperty.create("Guardar archivo."), botonBarraGuardar, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonBarraGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBarraGuardarActionPerformed(evt);
            }
        });
        panelOperacionesFichero.add(botonBarraGuardar);

        botonCamara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonCamara, org.jdesktop.beansbinding.ELProperty.create("Cámara."), botonCamara, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonCamara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCamaraActionPerformed(evt);
            }
        });
        panelOperacionesFichero.add(botonCamara);

        botonCaptura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonCaptura, org.jdesktop.beansbinding.ELProperty.create("Captura una imagen reproduciendose en un video o cámara."), botonCaptura, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonCaptura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapturaActionPerformed(evt);
            }
        });
        panelOperacionesFichero.add(botonCaptura);

        panelSuperior.add(panelOperacionesFichero);

        panelFormas.setMaximumSize(new java.awt.Dimension(300, 40));
        panelFormas.setMinimumSize(new java.awt.Dimension(300, 40));
        panelFormas.setPreferredSize(new java.awt.Dimension(300, 40));
        panelFormas.setLayout(new javax.swing.BoxLayout(panelFormas, javax.swing.BoxLayout.LINE_AXIS));

        grupoFiguras.add(botonPunto);
        botonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Lapiz.gif"))); // NOI18N
        botonPunto.setMaximumSize(new java.awt.Dimension(36, 38));
        botonPunto.setMinimumSize(new java.awt.Dimension(36, 38));
        botonPunto.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonPunto, org.jdesktop.beansbinding.ELProperty.create("Figura: punto."), botonPunto, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPuntoActionPerformed(evt);
            }
        });
        panelFormas.add(botonPunto);

        grupoFiguras.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Linea.gif"))); // NOI18N
        botonLinea.setMaximumSize(new java.awt.Dimension(36, 38));
        botonLinea.setMinimumSize(new java.awt.Dimension(36, 38));
        botonLinea.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonLinea, org.jdesktop.beansbinding.ELProperty.create("Figura: linea."), botonLinea, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        panelFormas.add(botonLinea);

        grupoFiguras.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setMaximumSize(new java.awt.Dimension(38, 38));
        botonRectangulo.setMinimumSize(new java.awt.Dimension(38, 38));
        botonRectangulo.setPreferredSize(new java.awt.Dimension(38, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonRectangulo, org.jdesktop.beansbinding.ELProperty.create("Figura: rectángulo."), botonRectangulo, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });
        panelFormas.add(botonRectangulo);

        grupoFiguras.add(botonElipse);
        botonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Ovalo.gif"))); // NOI18N
        botonElipse.setMaximumSize(new java.awt.Dimension(36, 38));
        botonElipse.setMinimumSize(new java.awt.Dimension(36, 38));
        botonElipse.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonElipse, org.jdesktop.beansbinding.ELProperty.create("Figura: elipse."), botonElipse, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElipseActionPerformed(evt);
            }
        });
        panelFormas.add(botonElipse);

        grupoFiguras.add(botonPoligono);
        botonPoligono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/poligono.png"))); // NOI18N
        botonPoligono.setMaximumSize(new java.awt.Dimension(36, 38));
        botonPoligono.setMinimumSize(new java.awt.Dimension(36, 38));
        botonPoligono.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonPoligono, org.jdesktop.beansbinding.ELProperty.create("Figura: Polígono."), botonPoligono, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonPoligono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPoligonoActionPerformed(evt);
            }
        });
        panelFormas.add(botonPoligono);

        grupoFiguras.add(botonCurva);
        botonCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curva.gif"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonCurva, org.jdesktop.beansbinding.ELProperty.create("Figura: Curva."), botonCurva, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonCurva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCurvaActionPerformed(evt);
            }
        });
        panelFormas.add(botonCurva);

        botonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonEditar, org.jdesktop.beansbinding.ELProperty.create("Editar figura."), botonEditar, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });
        panelFormas.add(botonEditar);

        panelSuperior.add(panelFormas);

        panelColores.setMaximumSize(new java.awt.Dimension(240, 38));
        panelColores.setMinimumSize(new java.awt.Dimension(240, 38));
        panelColores.setPreferredSize(new java.awt.Dimension(240, 38));
        panelColores.setLayout(new javax.swing.BoxLayout(panelColores, javax.swing.BoxLayout.LINE_AXIS));

        colorNegro.setBackground(java.awt.Color.black);
        grupoColores.add(colorNegro);
        colorNegro.setMaximumSize(new java.awt.Dimension(36, 38));
        colorNegro.setMinimumSize(new java.awt.Dimension(36, 38));
        colorNegro.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorNegro, org.jdesktop.beansbinding.ELProperty.create("Color: negro."), colorNegro, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        colorNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorNegroActionPerformed(evt);
            }
        });
        panelColores.add(colorNegro);

        colorBlanco.setBackground(java.awt.Color.white);
        grupoColores.add(colorBlanco);
        colorBlanco.setMaximumSize(new java.awt.Dimension(36, 38));
        colorBlanco.setMinimumSize(new java.awt.Dimension(36, 38));
        colorBlanco.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorBlanco, org.jdesktop.beansbinding.ELProperty.create("Color: blanco."), colorBlanco, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        colorBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBlancoActionPerformed(evt);
            }
        });
        panelColores.add(colorBlanco);

        colorRojo.setBackground(java.awt.Color.red);
        grupoColores.add(colorRojo);
        colorRojo.setMaximumSize(new java.awt.Dimension(36, 38));
        colorRojo.setMinimumSize(new java.awt.Dimension(36, 38));
        colorRojo.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorRojo, org.jdesktop.beansbinding.ELProperty.create("Color: rojo."), colorRojo, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        colorRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRojoActionPerformed(evt);
            }
        });
        panelColores.add(colorRojo);

        colorAmarillo.setBackground(java.awt.Color.yellow);
        grupoColores.add(colorAmarillo);
        colorAmarillo.setMaximumSize(new java.awt.Dimension(36, 38));
        colorAmarillo.setMinimumSize(new java.awt.Dimension(36, 38));
        colorAmarillo.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorAmarillo, org.jdesktop.beansbinding.ELProperty.create("Color: amarillo."), colorAmarillo, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        colorAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorAmarilloActionPerformed(evt);
            }
        });
        panelColores.add(colorAmarillo);

        colorVerde.setBackground(java.awt.Color.green);
        grupoColores.add(colorVerde);
        colorVerde.setMaximumSize(new java.awt.Dimension(36, 38));
        colorVerde.setMinimumSize(new java.awt.Dimension(36, 38));
        colorVerde.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorVerde, org.jdesktop.beansbinding.ELProperty.create("Color: verde."), colorVerde, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        colorVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorVerdeActionPerformed(evt);
            }
        });
        panelColores.add(colorVerde);

        colorAzul.setBackground(java.awt.Color.blue);
        grupoColores.add(colorAzul);
        colorAzul.setMaximumSize(new java.awt.Dimension(36, 38));
        colorAzul.setMinimumSize(new java.awt.Dimension(36, 38));
        colorAzul.setPreferredSize(new java.awt.Dimension(36, 38));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, colorAzul, org.jdesktop.beansbinding.ELProperty.create("Color: azul."), colorAzul, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        colorAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorAzulActionPerformed(evt);
            }
        });
        panelColores.add(colorAzul);

        panelSuperior.add(panelColores);

        panelAtributos.setLayout(new javax.swing.BoxLayout(panelAtributos, javax.swing.BoxLayout.LINE_AXIS));

        spinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        spinnerGrosor.setMaximumSize(new java.awt.Dimension(50, 32767));
        spinnerGrosor.setMinimumSize(new java.awt.Dimension(50, 50));
        spinnerGrosor.setPreferredSize(new java.awt.Dimension(50, 50));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, spinnerGrosor, org.jdesktop.beansbinding.ELProperty.create("Spinner para el grosor de la lineas. El grosor mínimo es 1, máximo 100."), spinnerGrosor, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        spinnerGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerGrosorStateChanged(evt);
            }
        });
        panelAtributos.add(spinnerGrosor);

        botonLineaDiscontinua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/discontinua.png"))); // NOI18N
        botonLineaDiscontinua.setMaximumSize(new java.awt.Dimension(40, 40));
        botonLineaDiscontinua.setMinimumSize(new java.awt.Dimension(40, 40));
        botonLineaDiscontinua.setPreferredSize(new java.awt.Dimension(40, 40));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonLineaDiscontinua, org.jdesktop.beansbinding.ELProperty.create("Linea discontinua."), botonLineaDiscontinua, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonLineaDiscontinua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaDiscontinuaActionPerformed(evt);
            }
        });
        panelAtributos.add(botonLineaDiscontinua);

        botonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonRelleno, org.jdesktop.beansbinding.ELProperty.create("Activado rellena las figuras del color actual."), botonRelleno, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRellenoActionPerformed(evt);
            }
        });
        panelAtributos.add(botonRelleno);

        botonDegradado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/degradado.jpg"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonDegradado, org.jdesktop.beansbinding.ELProperty.create("Degradado de una imagen, para que se aplique debe de estar la opción relleno activada."), botonDegradado, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonDegradado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDegradadoActionPerformed(evt);
            }
        });
        panelAtributos.add(botonDegradado);

        botonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonTransparencia, org.jdesktop.beansbinding.ELProperty.create("Aclara las lineas del color seleccionado"), botonTransparencia, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTransparenciaActionPerformed(evt);
            }
        });
        panelAtributos.add(botonTransparencia);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonAlisar, org.jdesktop.beansbinding.ELProperty.create("Activado mejora el antialiasing de las figuras nuevas."), botonAlisar, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAlisarActionPerformed(evt);
            }
        });
        panelAtributos.add(botonAlisar);

        panelSuperior.add(panelAtributos);

        getContentPane().add(panelSuperior, java.awt.BorderLayout.PAGE_START);

        escritorio.setPreferredSize(new java.awt.Dimension(800, 800));
        escritorio.add(ventanaError);
        escritorio.add(ventanaEleccionTam);

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        botonArchivo.setText("Archivo");

        botonNuevo.setText("Nuevo");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonNuevo, org.jdesktop.beansbinding.ELProperty.create("Nueva imagen."), botonNuevo, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        botonArchivo.add(botonNuevo);

        botonAbrir.setText("Abrir");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonAbrir, org.jdesktop.beansbinding.ELProperty.create("Abrir fichero."), botonAbrir, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        botonArchivo.add(botonAbrir);

        botonGuardar.setText("Guardar");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, botonGuardar, org.jdesktop.beansbinding.ELProperty.create("Guardar fichero."), botonGuardar, org.jdesktop.beansbinding.BeanProperty.create("toolTipText"));
        bindingGroup.addBinding(binding);

        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        botonArchivo.add(botonGuardar);

        menuGrabarAudio.setText("Grabar audio");
        menuGrabarAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGrabarAudioActionPerformed(evt);
            }
        });
        botonArchivo.add(menuGrabarAudio);

        jMenuBar1.add(botonArchivo);

        ver.setText("Ver");

        verBarraDibujo.setSelected(true);
        verBarraDibujo.setText("Ver barra de dibujo");
        verBarraDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraDibujoActionPerformed(evt);
            }
        });
        ver.add(verBarraDibujo);

        verBarraImagenes.setSelected(true);
        verBarraImagenes.setText("Ver barra operaciones imágenes");
        verBarraImagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraImagenesActionPerformed(evt);
            }
        });
        ver.add(verBarraImagenes);

        verBarraReproduccion.setSelected(true);
        verBarraReproduccion.setText("Ver barra reproducción");
        verBarraReproduccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraReproduccionActionPerformed(evt);
            }
        });
        ver.add(verBarraReproduccion);

        verBarraEstado.setSelected(true);
        verBarraEstado.setText("Ver barra estado");
        verBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraEstadoActionPerformed(evt);
            }
        });
        ver.add(verBarraEstado);

        jMenuBar1.add(ver);

        botonAyuda.setText("Ayuda");

        botonAcercaDe.setText("Acerca de");
        botonAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAcercaDeActionPerformed(evt);
            }
        });
        botonAyuda.add(botonAcercaDe);

        jMenuBar1.add(botonAyuda);

        setJMenuBar(jMenuBar1);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que obtiene la ventana imagen actual. En caso de que la ventana interna
     * actual no sea de tipo imagen, devuelve null.
     *
     * @return Devuelve un objeto de tipo VentanaInternaImagen
     */
    private VentanaInternaImagen getVentanaInternaImagen() {
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null && vi.getTipo() == VentanaInterna.IMAGEN)
            return (VentanaInternaImagen) escritorio.getSelectedFrame();
        else
            return null;
    }

    /**
     * Método que obtiene la ventana interna audio actual. En el caso de que la ventana interna
     * actual no sea de tipo audio, devuelve null.
     *
     * @return Devuelve un objeto de tipo VentanaInternaAudio
     */
    private VentanaInternaReproductor getVentanaInternaAudio(){
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null && vi.getTipo() == VentanaInterna.AUDIO)
            return (VentanaInternaReproductor) escritorio.getSelectedFrame();
        else
            return null;
    }
    
    /**
     * Método que obtiene la ventana interna cámara. En el caso de que la ventana interna 
     * cámara no sea de tipo cámara o no exista, devuelve null
     * @return Devuelve un objeto de tipo VentanaInternaCamara
     */
    private VentanaInternaCamara getVentanaInternaCamara(){
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null && vi.getTipo() == VentanaInterna.CAMARA)
            return (VentanaInternaCamara) escritorio.getSelectedFrame();
        else
            return null;
    }
    
    /**
     * Método que obtiene la ventana interna video actual. En el caso de que la ventana interna
     * actual no sea de tipo video, devuelve null.
     *
     * @return Devuelve un objeto de tipo VentanaInternaVideo
     */
    private VentanaInternaJMFPlayer getVentanaInternaVideo(){
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if( vi != null && vi.getTipo() == VentanaInterna.VIDEO)
            return (VentanaInternaJMFPlayer) escritorio.getSelectedFrame();
        else
            return null;
    }
    
    /**
     * Método que obtiene la ventana interna grabador actual. En el caso de que la ventana interna
     * actual no sea de tipo grabador, devuelve null.
     *
     * @return Devuelve un objeto de tipo VentanaInternaGrabador
     */
    private VentanaInternaGrabador getVentanaInternaGrabador(){
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        
        if(vi != null && vi.getTipo() == VentanaInterna.GRABAR)
            return (VentanaInternaGrabador) escritorio.getSelectedFrame();
        else
            return null;
    }




    /**
     * Método que pone los botones de operaciones sobre figuras a unos valores por
     * defecto. En este caso, pone el boton punto activado, color negro, spinerGrosor
     * con valor a 1, boton relleno, transparencia y alisar sin seleccionar.
     */
    private void valoresPorDefecto() {

        this.botonPunto.setSelected(true);
        this.colorNegro.setSelected(true);
        this.spinnerGrosor.setValue(1);
        this.botonRelleno.setSelected(false);
        this.botonTransparencia.setSelected(false);
        this.botonAlisar.setSelected(false);
        this.estado.setText("Punto");
        this.botonEditar.setSelected(false);
        this.botonLineaDiscontinua.setSelected(false);
        this.botonDegradado.setSelected(false);
    }
    
    /**
     * Método que pone los slider de operaciones sobre imágenes a sus valores iniciales.
     */
    private void ValoresVentanaImagenesPorDefecto(){
        // Ponemos el slider en el valor inicial
        this.sliderBrillo.setValue(0);
        // Ponemos el slider binario en el valor inicial
        this.sliderBinario.setValue(50);
        // Ponemos el slider umbralización en el valor inicial
        this.sliderUmbralizacion.setValue(128);
        // Ponemos el slider rotación en el valor inicial
        this.sliderRotacion.setValue(180);
        
    }

    /**
     * Método que actualiza los botones de una ventana interna imagen en función
     * de los atributos actuales en esa ventana. Los botones que actualizan son los siguientes:
     * botonTransparencia, spinnerGrosor, botonAlisar, botonRelleno, el botón color
     * correspondiente y el botón figura que corresponda.
     * @param vi de tipo VentanaInternaImagen, es la ventana interna que solicita que
     * actualice los botones la ventana principal en función de los atributos actuales 
     * de esa clase.
     */
    public void actualizaValoresVentanaImagen(VentanaInternaImagen vi) {
        // Obtenemos si la transparencia la tenemos activada y actualizamos el botón
        this.botonTransparencia.setSelected(vi.getLienzo().getAtributos().compositeActivo());

        // Obtenemos el valor del grosor actual y lo actualizamos en el spinner.
        this.spinnerGrosor.setValue(vi.getLienzo().getAtributos().grosor());

        // Obtenemos si el alisado está activado
        this.botonAlisar.setSelected(vi.getLienzo().getAtributos().alisadoActivo());

        // Obtenemos si el relleno está activado y actualizamos el botón
        this.botonRelleno.setSelected(vi.getLienzo().getAtributos().getRelleno());
        
        // Obtenemos si el degradado está activado y actualizamos el botón
        this.botonDegradado.setSelected(vi.getLienzo().getAtributos().getRellenoDegradado());
        
        // Obtenemos si la linea discontinua está activado y actualizamos el botón
        this.botonLineaDiscontinua.setSelected(vi.getLienzo().getAtributos().getLineaDiscontinua());
        
        // Obtenemos si la opción editar está activada y actualizamos el botón
        this.botonEditar.setSelected(vi.getLienzo().getEditar());

        // Activamos la figura que le corresponde a la ventana
        switch (vi.getLienzo().getFigura()) {
            case Lienzo2D.PUNTO:
                this.botonPunto.setSelected(true);
                this.estado.setText("Punto");
                break;
            case Lienzo2D.LINEA:
                this.botonLinea.setSelected(true);
                this.estado.setText("Linea");
                break;
            case Lienzo2D.RECTANGULO:
                this.botonRectangulo.setSelected(true);
                this.estado.setText("Rectángulo");
                break;
            case Lienzo2D.ELIPSE:
                this.botonElipse.setSelected(true);
                this.estado.setText("Elipse");
                break;
            case Lienzo2D.POLIGONO:
                this.botonPoligono.setSelected(true);
                this.estado.setText("Polígono");
                break;
            case Lienzo2D.CURVA:
                this.botonCurva.setSelected(true);
                this.estado.setText("Curva");
                break;
        }

        // Por último obtenemos el color actual de la ventana
        String color = vi.getLienzo().getAtributos().getNombreColor();

        switch (color) {
            case "Negro":
                this.colorNegro.setSelected(true);
                break;
            case "Blanco":
                this.colorBlanco.setSelected(true);
                break;
            case "Rojo":
                this.colorRojo.setSelected(true);
                break;
            case "Verde":
                this.colorVerde.setSelected(true);
                break;
            case "Amarillo":
                this.colorAmarillo.setSelected(true);
                break;
            case "Azul":
                this.colorAzul.setSelected(true);
                break;
        }
    }

    /**
     * Método que actualiza el botón play en función del booleano recibido como
     * booleano.
     * @param activado de tipo boolean, true pone el botonPlay activado, false
     * en caso contrario.
     */
    public void actualizaBotonPlay(boolean activado) {

        if(activado)
            this.botonPlay.setSelected(activado);
        else
            this.botonReproduccion.clearSelection();

    }
    
    /**
     * Método que actualiza el estado de una ventana interna reproductor.
     * Hay dos posibles estados que son: Reproduciendo y Pausa.
     * @param estado de tipo string que se muestra en la barra de la ventana interna 
     * audio.
     */
    public void actualizaEstado(String estado){
        VentanaInternaReproductor vr = this.getVentanaInternaAudio();
        
        if(vr != null){
            vr.setTitle(vr.getNombre() + "[" + estado + "]");
        }
    }

    /**
     * Método que actualiza el botón stop en función del booleano recibido como
     * parámetro.
     */
    public void actualizaBotonStop() {

        this.botonReproduccion.clearSelection();

    }
    
    
    /**
     * Método que actualiza el botón grabar en función del booleano recibido como
     * parámetro.
     * @param estado de tipo boolea, true pone el botonGrabar activado, false en
     * caso contrario.
     */
    public void actualizaBotonGrabar(boolean estado) {
        this.botonGrabar.setSelected(estado);
    }

    /**
     * Método que crea una nueva imagen, la declara de tipo INT_RGB y la añade
     * al escritorio.
     *
     * @param evt corresponde al evento de la aplicación cuando el usuario pulsa
     * en la pestaña nuevo.
     */
    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        int ancho, alto;
        
        ventanaSeleccionTam vt = new ventanaSeleccionTam(this, rootPaneCheckingEnabled);
        vt.setVisible(true);
        if(vt.getBotonAceptar()){ // Si el usuario ha pulstado el boton aceptar
            ancho = vt.getAncho();
            alto = vt.getAlto();
            // Creamos la nueva imagen de tipo RGB
            BufferedImage img;
            img = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_RGB);
            // El color de fondo es blanco y asignamos el ancho y alto.
            img.getGraphics().setColor(Color.WHITE);
            img.getGraphics().fillRect(0, 0, img.getWidth(), img.getHeight());
            // Creamos la nueva ventana imagen
            VentanaInternaImagen vi = VentanaInternaImagen.getInstance(img, this, "Imagen nueva");
            if(vi != null){
                // La añadimos al escritorio
                escritorio.add(vi);
                // Activamos la ventana
                vi.setVisible(true);
                vi.setTitle("Imagen nueva");
            }
            else
                JOptionPane.showMessageDialog(this.ventanaError,
                        "Error al crear la nueva imagen", "Error", JOptionPane.ERROR_MESSAGE);

            // Ponemos los valores por defecto en la interfaz para esta ventnaa
            this.valoresPorDefecto();
        }
    }//GEN-LAST:event_botonNuevoActionPerformed

    /**
     * Método que selecciona la figura punto en la ventana interna actual.
     *
     * @param evt
     */
    private void botonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPuntoActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            // Seleccionamos el punto en la ventana.
            vi.getLienzo().setFigura(Lienzo2D.PUNTO);
            
            // Actualizamos la etiqueta estado
            this.estado.setText("Punto");
        }
    }//GEN-LAST:event_botonPuntoActionPerformed

    /**
     * Método que selecciona la figura linea en la ventana interna actual.
     *
     * @param evt
     */
    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            // Seleccionamos el punto en la ventana.
            vi.getLienzo().setFigura(Lienzo2D.LINEA);
            // Actualizamos la etiqueta estado
            this.estado.setText("Linea");
        }
    }//GEN-LAST:event_botonLineaActionPerformed

    /**
     * Método que selecciona la figura rectángulo en la ventana interna actual
     *
     * @param evt
     */
    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            // Seleccionamos el rectángulo en la ventana.
            vi.getLienzo().setFigura(Lienzo2D.RECTANGULO);
            // Actualizamos la etiqueta estado
            this.estado.setText("Rectángulo");
        }
    }//GEN-LAST:event_botonRectanguloActionPerformed

    /**
     * Método que selecciona la figura elipse en la ventana interna actual.
     *
     * @param evt
     */
    private void botonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElipseActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            // Seleccionamos la elipse en la ventana.
            vi.getLienzo().setFigura(Lienzo2D.ELIPSE);
            // Actualizamos la etiqueta estado
            this.estado.setText("Elipse");
        }
    }//GEN-LAST:event_botonElipseActionPerformed

    /**
     * Método que selecciona el color negro para la figura a pintar y manda el mensaje
     * a la ventana interna imagen actual.
     * @param evt 
     */
    private void colorNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorNegroActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            if(vi.getLienzo().getAtributos() != null)
                // Añadimos el color negro a los atributos actuales en la ventana interna
                vi.getLienzo().getAtributos().setColor(Color.black);
            vi.getLienzo().repaint();
        }
        
    }//GEN-LAST:event_colorNegroActionPerformed

    /**
     * Método que selecciona el color blanco para la figura a pintar y manda el mensaje
     * a la ventana interna imagen actual.
     * @param evt 
     */
    private void colorBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBlancoActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            if(vi.getLienzo().getAtributos() != null)
                // Añadimos el color blanco a los atributos actuales en la ventana interna
                vi.getLienzo().getAtributos().setColor(Color.white);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_colorBlancoActionPerformed
    /**
     * Método que selecciona el color rojo para la figura a pintar y manda el mensaje
     * a la ventana interna imagen actual.
     * @param evt 
     */
    private void colorRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRojoActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null ) {
            if(vi.getLienzo().getAtributos() != null)
                // Añadimos el color rojo a los atributos actuales en la ventana interna
                vi.getLienzo().getAtributos().setColor(Color.red);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_colorRojoActionPerformed
    /**
     * Método que selecciona el color amarillo para la figura a pintar y manda el mensaje
     * a la ventana interna imagen actual.
     * @param evt 
     */
    private void colorAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAmarilloActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            if(vi.getLienzo().getAtributos() != null)
                // Añadimos el color amarillo a los atributos actuales en la ventana interna
                vi.getLienzo().getAtributos().setColor(Color.yellow);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_colorAmarilloActionPerformed
    /**
     * Método que selecciona el color verde para la figura a pintar y manda el mensaje
     * a la ventana interna imagen actual.
     * @param evt 
     */
    private void colorVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorVerdeActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            if(vi.getLienzo().getAtributos() != null)
                // Añadimos el color verde a los atributos actuales en la ventana interna
                vi.getLienzo().getAtributos().setColor(Color.green);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_colorVerdeActionPerformed
    /**
     * Método que selecciona el color azúl para la figura a pintar y manda el mensaje
     * a la ventana interna imagen actual.
     * @param evt 
     */
    private void colorAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAzulActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            if(vi.getLienzo().getAtributos() != null)
                // Añadimos el color azul a los atributos actuales en la ventana interna
                vi.getLienzo().getAtributos().setColor(Color.blue);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_colorAzulActionPerformed

    /**
     * Método que envia el valor del grosor a la ventana interna imagen actual
     * cuando el usuario selecciona algún valor del spinnerGrosor.
     * @param evt 
     */
    private void spinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerGrosorStateChanged
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null) {
            if(vi.getLienzo().getAtributos() != null)

                vi.getLienzo().getAtributos().setStroke((int) this.spinnerGrosor.getValue());
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_spinnerGrosorStateChanged

    /**
     * Método que envia el valor (true o false) del botón transparencia cuando este ha
     * sido seleccionado/deseleccionado por el usuario.
     * @param evt 
     */
    private void botonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTransparenciaActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi =  this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null ) {
            if(vi.getLienzo().getAtributos() != null)
                vi.getLienzo().getAtributos().setComposite(this.botonTransparencia.isSelected());
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_botonTransparenciaActionPerformed

    /**
     * Método que envia el estado del botón de relleno para figuras (true o false)
     * a la ventana interna imagen actual cuando el usuario interacciona con el boton
     * relleno.
     * @param evt 
     */
    private void botonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenoActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null ) {
            if(vi.getLienzo().getAtributos() != null){
                vi.getLienzo().getAtributos().setRelleno(this.botonRelleno.isSelected());
                this.botonDegradadoActionPerformed(evt);
            }
            
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_botonRellenoActionPerformed

    /**
     * Método que envia el estado del botón de alisar para figuras (true o false)
     * a la ventana interna imagen actual cuando el usuario interacciona con el boton
     * alisar.
     * @param evt 
     */
    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null ) {
            if(vi.getLienzo().getAtributos() != null)
                vi.getLienzo().getAtributos().setRenderingHints(this.botonAlisar.isSelected());
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_botonAlisarActionPerformed

    /**
     * Método que activa la figura polígono en la ventana imagen actual cuando
     * el usuario pulsa el botón polígono.
     * @param evt 
     */
    private void botonPoligonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPoligonoActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null ) {
            // Seleccionamos el rectángulo en la ventana.
            vi.getLienzo().setFigura(Lienzo2D.POLIGONO);
            // Actualizamos la etiqueta estado
            this.estado.setText("Polígono");
        }
    }//GEN-LAST:event_botonPoligonoActionPerformed

    /**
     * Método que abre el diálogo con el usuario para abrir el fichero que
     * desee el usuario y que crea:
     * Una ventana interna imagen cuando el fichero es de tipo jpg, gif o png.
     * Una ventana interna audio cuando el fichero es de tipo wav.
     * Una ventana interna video cuando el fichero es de tipo avi.
     * @param evt 
     */
    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        VentanaInterna vi;
        JFileChooser dlg = new JFileChooser();
        // Solo se puede abrir archivos con las siguientes extensiones
        dlg.setFileFilter(new FileNameExtensionFilter("JPG", "jpg"));
        dlg.setFileFilter(new FileNameExtensionFilter("PNG", "png"));
        dlg.setFileFilter(new FileNameExtensionFilter("GIF", "gif"));
        dlg.setFileFilter(new FileNameExtensionFilter("WAV", "wav"));
        dlg.setFileFilter(new FileNameExtensionFilter("AVI", "avi"));
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                String nombre = f.getName();
                // Extraemos la extensión del archivo.
                int indice = nombre.lastIndexOf(".");
                String extension = nombre.substring(indice);

                if (extension.equals(".jpg") || extension.equals(".png")) {
                    vi = VentanaInternaImagen.getInstance(f, this, nombre);
                    
                    if(vi != null){
                        this.escritorio.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                        vi.setTitle(nombre);
                        this.estado.setText(nombre);
                    }
                    else
                        JOptionPane.showMessageDialog(this.ventanaError,
                                "Introduce un archivo de imagen válido", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (extension.equals(".wav")) {
                    vi = VentanaInternaReproductor.getInstance(f, this, nombre);
                    if(vi != null){
                        escritorio.add(vi);
                        vi.setVisible(true);
                        vi.setTitle(nombre);
                        this.estado.setText(nombre);
                    }
                    else
                        JOptionPane.showMessageDialog(this.ventanaError,
                                "Introduce un archivo de audio válido", "Error", JOptionPane.ERROR_MESSAGE);                        
                } else if (extension.equals(".avi")) {
                    vi = VentanaInternaJMFPlayer.getInstance(f, this, nombre);
                    if(vi != null){
                        this.escritorio.add(vi);
                        vi.setVisible(true);
                        vi.setTitle(nombre);
                        this.estado.setText(nombre);
                    }
                    else{
                        JOptionPane.showMessageDialog(this.ventanaError,
                                "Introduce un archivo de video válido", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.ventanaError, "Introduce un archivo válido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_botonAbrirActionPerformed

    /**
     * Método que se utiliza cuando el slider brillo se comienza a utilizar. 
     * Obtiene la ventana actual y la almacena en el atributo de clase ventanaActual.
     * También obtiene la imagen de la ventana actual en caso de que exista y que es
     * almacenada en el atributo imgSource1.
     * @param evt 
     */
    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        this.ventanaActual = this.getVentanaInternaImagen();

        if (this.ventanaActual != null) {
            this.imgSource1 = this.ventanaActual.getLienzo().getImage();
            this.ventanaActual.setTitle(this.ventanaActual.getNombre() + "*");
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    /**
     * Método que pone los atributos de clase imgSource1 y ventanaActual a null
     * cuando se deja de usar el sliderBrillo.
     * @param evt 
     */
    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost

        this.imgSource1 = null;
        this.ventanaActual = null;
        this.ValoresVentanaImagenesPorDefecto();
    }//GEN-LAST:event_sliderBrilloFocusLost

    /**
     * Método que actualiza el brillo de la imagen actual cuando se utiliza el sliderBrillo.
     * @param evt 
     */
    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        if (this.imgSource1 != null) { // Imagen válida
            try {
                RescaleOp rop;
                float brillo = (float) this.sliderBrillo.getValue();
                if (this.imgSource1.getColorModel().hasAlpha()) {
                    float[] alpha = {1.0F, 1.0F, 1.0F, 1.0F};
                    float[] beta = {brillo, brillo, brillo, 0};
                    rop = new RescaleOp(alpha, beta, null);
                } else {
                    rop = new RescaleOp(1.0F, brillo, null);
                }

                BufferedImage img = rop.filter(this.imgSource1, null);
                this.ventanaActual.getLienzo().setImage(img);
                this.ventanaActual.getLienzo().repaint();

            } catch (Exception e) {
                System.err.println("Error");
            }
        }


    }//GEN-LAST:event_sliderBrilloStateChanged

    /**
     * Método que se activa cuando el usuario pulsa el botón de contraste normal.
     * Actualiza la imagen con la operación de contraste normal.
     * @param evt 
     */
    private void contrasteNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteNormalActionPerformed

        VentanaInternaImagen vi = this.getVentanaInternaImagen();

        if (vi != null) { // hay una ventana activa

            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) { // Existe una imagen.
                try {

                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                    LookupOp lop = new LookupOp(lt, null);

                    lop.filter(img, img);
 
                    vi.getLienzo().repaint();
                    vi.setTitle(vi.getNombre() + "*");
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }

            }
        }
    }//GEN-LAST:event_contrasteNormalActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa el botón de contraste oscurecido.
     * Actualiza la imagen oscureciendola.
     * @param evt 
     */
    private void contasteOscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contasteOscurecidoActionPerformed

        VentanaInternaImagen vi = this.getVentanaInternaImagen();

        if (vi != null) { // hay una ventana activa

            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) { // Existe una imagen.
                try {

                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                    LookupOp lop = new LookupOp(lt, null);

                    BufferedImage nueva = lop.filter(img, null);
                    vi.getLienzo().setImage(nueva);
                    vi.setTitle(vi.getNombre() + "*");
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }

            }
        }
    }//GEN-LAST:event_contasteOscurecidoActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa el botón del contraste iluminado.
     * Actualiza la imagen iluminandola.
     * @param evt 
     */
    private void contrasteIluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteIluminadoActionPerformed

        VentanaInternaImagen vi = this.getVentanaInternaImagen();

        if (vi != null) { // hay una ventana activa

            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) { // Existe una imagen.
                try {

                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_GAMMA_CORRECTION);
                    LookupOp lop = new LookupOp(lt, null);

                    lop.filter(img, img);
                    vi.setTitle(vi.getNombre() + "*");
                   
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }

            }
        }
    }//GEN-LAST:event_contrasteIluminadoActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa sobre el botón incrementar.
     * Actualiza la imagen incrementando su tamaño.
     * @param evt 
     */
    private void botonEscalaIncrementarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscalaIncrementarActionPerformed

        VentanaInternaImagen vi = this.getVentanaInternaImagen();

        if (vi != null) {

            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) {
                try {
                    // Para aumentar la imagen en 1.25
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage nueva = atop.filter(img, null);
                    vi.getLienzo().setImage(nueva);
                    vi.setTitle(vi.getNombre() + "*");
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonEscalaIncrementarActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa sobre el botón reducir.
     * Disminuye el tamaño de la imagen actual de la ventana interna imagen.
     * @param evt 
     */
    private void botonEscalaReducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscalaReducirActionPerformed

        VentanaInternaImagen vi = this.getVentanaInternaImagen();

        if (vi != null) {

            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) {

                // Para disminuir la imagen en 0.75
                AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage nueva= atop.filter(img, null);
                vi.getLienzo().setImage(nueva);
                vi.setTitle(vi.getNombre() + "*");
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonEscalaReducirActionPerformed

    /**
     * Método que se activa cuando el usuario selecciona una de estras tres opciones:
     * 1. Emborronamiento
     * 2. Enfoque
     * 3. Relieve
     * Para la operación emborronamiento difumina la imagen.
     * Para la segunda operación, enfoca más la imagen.
     * Para la última operación, da una sesión de relieve la imagen.
     * @param evt 
     */
    private void botonFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFiltroActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen(); // Obtiene ventana activa
        if (vi != null) { // Ventana válida.
            // Obtiene la imagen original
            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) { // Imagen válida

                switch (this.botonFiltro.getSelectedIndex()) {
                    case 0: // Corresponde con la opción Emborronamiento en combobox
                        try {

                            // Crea el kernel de tipo media para la imagen
                            Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);

                            ConvolveOp cop;
                            cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                            BufferedImage nueva = cop.filter(img, null);
                            vi.getLienzo().setImage(nueva);
                            vi.setTitle(vi.getNombre() + "*");
                            vi.getLienzo().repaint();
                        } catch (Exception e) {
                            System.err.println(e.getLocalizedMessage());
                        }
                        break;
                    case 1: // Corresponde con la opción Enfoque en combobox    
                        try {

                            Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                            ConvolveOp cop;
                            cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);

                            BufferedImage nueva = cop.filter(img, null);
                            vi.getLienzo().setImage(nueva);
                            vi.setTitle(vi.getNombre() + "*");
                            vi.getLienzo().repaint();
                        } catch (Exception e) {
                            System.err.println(e.getLocalizedMessage());
                        }
                        break;
                    case 2: // Corresponde con la operación relieve en combobox
                        try {

                            Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                            ConvolveOp cop;
                            cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);

                            BufferedImage nueva = cop.filter(img, null);
                            vi.getLienzo().setImage(nueva);
                            vi.setTitle(vi.getNombre() + "*");
                            vi.getLienzo().repaint();
                        } catch (Exception e) {
                            System.err.println(e.getLocalizedMessage());
                        }
                        break;
                }
            }
        }

    }//GEN-LAST:event_botonFiltroActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa sobre el botón Sepia.
     * Actualiza la imagen de la ventana interna actual poniendo la imagen en blanco
     * y negro.
     * @param evt 
     */
    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen();

        if (vi != null) {

            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) {
                try {

                   
                    SepiaOp sepia = new SepiaOp();

                    sepia.filter(img, img);

                    vi.setTitle(vi.getNombre() + "*");
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonSepiaActionPerformed

    /**
     * Método que se activa cuando el usuario utiliza el sliderBinario.
     * Con este método mezcla dos imagenes y el resultado lo almacena en una ventana interna
     * imagen que es utilizada para el mezclado.
     * @param evt 
     */
    private void sliderBinarioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBinarioStateChanged

        if (this.imgSource1 != null && this.imgSource2 != null) {
            try {
                // Alpha tiene que estar entre 0 y 1, el slider no deja poner estos valores
                // con lo cual el valor del slider (entre 0 y 100) lo divide por 100.0 y
                // obtiene alpha
                BlendOp op = new BlendOp(this.imgSource1, (float) (sliderBinario.getValue() / 100.0));
                BufferedImage imgdest = op.filter(this.imgSource2, null);
                this.ventanaSecundaria.getLienzo().setImage(imgdest);
                this.ventanaSecundaria.getLienzo().repaint();
            } catch (IllegalArgumentException e) {
                System.err.println("Error: " + e.getLocalizedMessage());
            }
        }


    }//GEN-LAST:event_sliderBinarioStateChanged

    /**
     * Método que se utiliza cuando el usuario pulsa el slider binario,
     * cogiendo tanto la imagen de la ventana actual como la imagen de otra ventana
     * y creando una nueva ventana donde irá la imagen nueva resultado de la
     * mezcla de las dos imágenes.
     * @param evt 
     */
    private void sliderBinarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBinarioFocusGained
        this.ventanaActual = this.getVentanaInternaImagen();

        if(this.ventanaActual != null){
            
            VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.selectFrame(false);
            
            if(vi != null && vi.getTipo() == VentanaInterna.IMAGEN){

                this.imgSource1 = this.ventanaActual.getLienzo().getImage();
                this.imgSource2 = vi.getLienzo().getImage();
                this.ventanaSecundaria = VentanaInternaImagen.getInstance(imgSource2, this, "Mezclando...");
                this.escritorio.add(this.ventanaSecundaria); // Añade al array escritorio
                this.ventanaSecundaria.setVisible(true); // La hace visible
                this.ventanaSecundaria.setTitle("Mezclando...");
            }
        }
    }//GEN-LAST:event_sliderBinarioFocusGained

    /**
     * Botón suma que realiza una operación de dos imágenes poniendo la imagen
     * de la ventana interna actual sobre otra imagen de otra ventana y almacenandola
     * el resultado en una nueva ventana.
     * @param evt 
     */
    private void botonSumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSumaActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(false);
            
            if (viNext != null && viNext.getTipo() == VentanaInterna.IMAGEN) {
                BufferedImage imgRight = vi.getLienzo().getImage();
                BufferedImage imgLeft = ((VentanaInternaImagen)viNext).getLienzo().getImage();
                
                if (imgRight != null && imgLeft != null) {
                    try {
                        BlendOp op = new BlendOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = VentanaInternaImagen.getInstance(imgdest, this, "Nueva");
                        if(vi != null){
                            this.escritorio.add(vi);
                            vi.setVisible(true);
                            vi.setTitle("Nueva*");
                        }
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: "+e.getLocalizedMessage());
                    }   
                }
            } 
        }
    }//GEN-LAST:event_botonSumaActionPerformed

   /**
     * Botón resta que realiza una operación de dos imágenes poniendo la imagen
     * de la ventana interna actual detras de otra imagen de otra ventana y almacenandola
     * el resultado en una nueva ventana.
     * @param evt 
     */
    private void botonRestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRestaActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(false);
            
            if (viNext != null && viNext.getTipo() == VentanaInterna.IMAGEN) {
                BufferedImage imgRight = vi.getLienzo().getImage();
                BufferedImage imgLeft = ((VentanaInternaImagen)viNext).getLienzo().getImage();
                
                if (imgRight != null && imgLeft != null) {
                    try {
                        SubtractionOp op = new SubtractionOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = VentanaInternaImagen.getInstance(imgdest, this, "Nueva");
                        if(vi != null){
                            this.escritorio.add(vi);
                            vi.setVisible(true);
                            vi.setTitle("Nueva*");
                        }
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: "+e.getLocalizedMessage());
                    }   
                }
            } 
        }
    }//GEN-LAST:event_botonRestaActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa por primera vez
     * el slider de umbralización.
     * Obtiene la ventana imagen actual y a su vez la imagen de esa ventana
     * y lo almacena en los atributos de clase para su posterior operación.
     * @param evt 
     */
    private void sliderUmbralizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralizacionFocusGained
        this.ventanaActual = this.getVentanaInternaImagen();

        if (this.ventanaActual != null) {
            this.imgSource1 = this.ventanaActual.getLienzo().getImage();
            this.imgSource2 = this.ventanaActual.getLienzo().getImage();
            this.ventanaActual.setTitle(this.ventanaActual.getNombre() + "*");
        }
    }//GEN-LAST:event_sliderUmbralizacionFocusGained

    /**
     * Método que pone los atributos ventanaActual y imgSource1 cuando el
     * usuario deja de utilizar el sliderUmbralización.
     * @param evt 
     */
    private void sliderUmbralizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralizacionFocusLost
        this.ventanaActual = null;
        this.imgSource1 = null;
        this.imgSource2 = null;
        this.ValoresVentanaImagenesPorDefecto();
    }//GEN-LAST:event_sliderUmbralizacionFocusLost

    /**
     * Método que se activa cuando el usuario utiliza el slider de umbralización.
     * Utiliza una operación sobre la imagen para que el valor de cada pixel se actualice
     * a blanco o negro en función del valor del slider.
     * @param evt 
     */
    private void sliderUmbralizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderUmbralizacionStateChanged
        if (this.imgSource1 != null) {
            try {

                // Crea una instancia con el umbral seleccionado en el slider
                UmbralizacionOp umbral = new UmbralizacionOp(this.sliderUmbralizacion.getValue());
                // Crea la nueva imagen
                imgSource2 = umbral.filter(this.imgSource1, null);
                this.ventanaActual.getLienzo().setImage(imgSource2);
                this.ventanaActual.getLienzo().repaint();
            } catch (Exception e) {
                System.err.println("Error");
            }
        }
    }//GEN-LAST:event_sliderUmbralizacionStateChanged

    /**
     * Método que se activa cuando el usuario se utiliza el slider de rotación.
     * Con este método rota la imagen actual en función de la posición del  slider.
     * @param evt 
     */
    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged

        if (this.imgSource1 != null) {
            try {
                // Obtiene los radianes
                double radianes = Math.toRadians(this.sliderRotacion.getValue());
                // Obtiene el punto medio de la imagen
                Point p = new Point(this.imgSource1.getWidth() / 2, this.imgSource1.getHeight() / 2);

                AffineTransform at = AffineTransform.getRotateInstance(radianes, p.getX(), p.getY());
                AffineTransformOp atop;
                atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage img = atop.filter(this.imgSource1, null);

                // Modificamos la nueva imagen
                this.ventanaActual.getLienzo().setImage(img);
                this.ventanaActual.getLienzo().repaint();
            } catch (Exception e) {
                System.err.println(e.getLocalizedMessage());
            }

        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    /**
     * Método que se activa cuando el usuario pulsa por primera vez el slider
     * rotación. Obtiene la ventana actual y la imagen de la ventana y lo almacena
     * en los atributos de clase para su posterior utilización.
     * @param evt 
     */
    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        this.ventanaActual = this.getVentanaInternaImagen();

        if (this.ventanaActual != null) {
            this.imgSource1 = this.ventanaActual.getLienzo().getImage();
            this.ventanaActual.setTitle(this.ventanaActual.getNombre());
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    /**
     * Método que se activa cuando el usuario deja de utilizar el slider
     * rotación. Pone los atributos ventanaActual y imgSource1 a null.
     * @param evt 
     */
    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        this.ventanaActual = null;
        this.imgSource1 = null;
        this.ValoresVentanaImagenesPorDefecto();
    }//GEN-LAST:event_sliderRotacionFocusLost

    /**
     * Método que se activa cuando el usuario utiliza una de las operaciones del
     * combobox. Las tres operaciones posibles son las siguientes:
     * 1. Negativo: Pone le coler del pixel contrario al pixel actual
     * 2. Gris: Pone en tono de grises la imagen.
     * 3. Aumentar azul: Aumenta los azules de los píxeles.
     * 
     * @param evt 
     */
    private void comboboxTransformacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxTransformacionesActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen();

        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImage();

            if (img != null) {
                switch (this.comboboxTransformaciones.getSelectedIndex()) {
                    case 0: // Correspondiente a operación negativa (invertir colores)

                        try {

                            LookupTable lup = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                            LookupOp lop = new LookupOp(lup, null);

                            // Para asegurar la compatibilidad de tipos
                            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);

                            BufferedImage nueva = lop.filter(img, null);

                            vi.getLienzo().setImage(nueva);
                            vi.setTitle(vi.getNombre() + "*");
                            vi.getLienzo().repaint();
                        } catch (Exception e) {
                            System.err.println(e.getLocalizedMessage());
                        }
                        break;
                    case 1: // Transformación niveles de gris
                        try {
                            ICC_Profile ip;

                            ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                            ColorSpace cs = new ICC_ColorSpace(ip);
                            ColorConvertOp ccop = new ColorConvertOp(cs, null);

                            BufferedImage nueva = ccop.filter(img, null);

                            vi.getLienzo().setImage(nueva);
                            vi.setTitle(vi.getNombre() + "*");
                            vi.getLienzo().repaint();

                        } catch (Exception e) {
                            System.err.println(e.getLocalizedMessage());
                        }
                        break;
                    case 2:
                        try {
                            BufferedImage nueva;
                            AumentarAzul aumentarAzul = new AumentarAzul(50);

                            nueva = aumentarAzul.filter(img, null);

                            vi.getLienzo().setImage(nueva);
                            vi.setTitle(vi.getNombre() + "*");
                            vi.getLienzo().repaint();
                        } catch (Exception e) {
                            System.err.println(e.getLocalizedMessage());
                        }
                        break;

                }
            }
        }


    }//GEN-LAST:event_comboboxTransformacionesActionPerformed

    /**
     * Método que se activa cuando el usuario activa el botón play.
     * Envia un mensaje a la ventana interna reproductor para que inicialice la 
     * reproducción de sonido.
     * @param evt 
     */
    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed

        VentanaInternaReproductor vr = this.getVentanaInternaAudio();

        if (vr != null) {
            vr.play();
        }
    }//GEN-LAST:event_botonPlayActionPerformed

    /**
     * Método que se activa cuando el usuario activa el botón stop.
     * Envia un mensaje a la ventana interna reproductor para que pause la reproducción
     * del sonido.
     * @param evt 
     */
    private void botonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStopActionPerformed

        VentanaInternaReproductor vr = this.getVentanaInternaAudio();

        if (vr != null) {
            vr.stop();
        }
    }//GEN-LAST:event_botonStopActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa el botón grabar. 
     * Envia un mensaje de grabado o stop grabado en función del estado del
     * botón.
     * @param evt 
     */
    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
        VentanaInternaGrabador vrecord = this.getVentanaInternaGrabador();

        if(vrecord != null){
            if(botonGrabar.isSelected())
                vrecord.record();
            else
                vrecord.stop();
        }
    }//GEN-LAST:event_botonGrabarActionPerformed

    /**
     * Método que abre un diálogo con el usuario para que guarde en un directorio
     * la imagen con las figuras pintadas sobre la imagen. En caso de que falle
     * el guardado, activa una ventana para avisar al usuario.
     * @param evt 
     */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        VentanaInternaImagen vi =this.getVentanaInternaImagen();
        if (vi != null) {

            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    
                    BufferedImage img = vi.getLienzo().getImage(true);
                    
                    if (img != null) {
                        File f = dlg.getSelectedFile();

                        String extensiones[] = ImageIO.getWriterFormatNames();
                        boolean continuar = true;
                        for (int i = 0; i < extensiones.length && continuar; i++) {
                            if (f.getName().endsWith("." + extensiones[i])) {
                                ImageIO.write(img, extensiones[i], f);
                                
                                vi.setTitle(f.getName());
                                continuar = false;
                            }
                            
                        }
                        if (continuar) {
                            // Mensaje de error, si el usuario no ha introducido el formato correcto.
                            JOptionPane.showMessageDialog(this.ventanaError, "Introduce un formato.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this.ventanaError, "Formato erroneo.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

    }//GEN-LAST:event_botonGuardarActionPerformed

    /**
     * Método que abre el diálogo con el usuario para que indique el archivo sobre
     * el que se quiere grabar el audio.
     * @param evt 
     */
    private void menuGrabarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGrabarAudioActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(new FileNameExtensionFilter("WAV", "wav"));
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                String nombre = f.getName();
                // Extraemos la extensión del archivo.
                int indice = nombre.lastIndexOf(".");
                String extension = nombre.substring(indice);
                if (extension.equals(".wav")) {
                    VentanaInternaGrabador vr = VentanaInternaGrabador.getInstance(f, this, nombre);
                    if(vr != null){
                        escritorio.add(vr);
                        vr.setVisible(true);
                        vr.setTitle(nombre);
                    }
                }
                    else
                        JOptionPane.showMessageDialog(this.ventanaError,
                                "Introduce un archivo válido", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.ventanaError, "Introduce un archivo válido", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_menuGrabarAudioActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa el botón editar.
     * Envia un mensaje al lienzo de la ventana imagen actual para que
     * se active/desactive la opción editar.
     * @param evt 
     */
    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        
        if(vi != null){
            vi.getLienzo().setEditar(botonEditar.isSelected());
        }
    }//GEN-LAST:event_botonEditarActionPerformed

    /**
     * Método que se activa cuando el usuario pulsa sobre el botón de figura curva.
     * Envia un mensaje al lienzo para que las figuras que se pinten sea de tipo curva.
     * @param evt 
     */
    private void botonCurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCurvaActionPerformed
        // Obtenemos la ventana actual
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        // Si existe la ventan actual
        if (vi != null ) {
            // Seleccionamos el rectángulo en la ventana.
            vi.getLienzo().setFigura(Lienzo2D.CURVA);
            // Actualizamos la etiqueta estado
            this.estado.setText("Curva");
        }        
    }//GEN-LAST:event_botonCurvaActionPerformed

    /**
     * Método que crea una ventana nueva con un lienzo con fondo blanco para que el
     * usuario pueda realizar unas operaciones con figuras.
     * @param evt 
     */
    private void botonBarraNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBarraNuevoActionPerformed
        this.botonNuevoActionPerformed(evt);
    }//GEN-LAST:event_botonBarraNuevoActionPerformed

    /**
     * Método que abre un archivo y lo muestra en su correspondiente ventana.
     * @param evt 
     */
    private void botonBarraAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBarraAbrirActionPerformed
        this.botonAbrirActionPerformed(evt);
    }//GEN-LAST:event_botonBarraAbrirActionPerformed

    /**
     * Método que guarda el fichero seleccionado de la ventana actual.
     * @param evt 
     */
    private void botonBarraGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBarraGuardarActionPerformed
        this.botonGuardarActionPerformed(evt);
    }//GEN-LAST:event_botonBarraGuardarActionPerformed

    /**
     * Método que crea una VentanaInternaCamara y la muestra en el escritorio de ventanas.
     * @param evt 
     */
    private void botonCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCamaraActionPerformed
        // Creamos la ventana para la cámara
        VentanaInternaCamara vc = VentanaInternaCamara.getInstance(this);
        
        if(vc != null){ // Se ha creado bien la cámara
            // Añadimos al escritorio
            this.escritorio.add(vc);
            vc.setVisible(true);
            vc.setTitle("Cámara");
        }
    }//GEN-LAST:event_botonCamaraActionPerformed

    /**
     * Método que captura una imagen de un video o webcam.
     * @param player de tipo Player, corresponde al video o webcam del que se quiere
     * obtener la imagen.
     * @return Devuelve un objeto de tipo BufferedImage que se corresponde con la 
     * imagen capturada.
     */
    private BufferedImage getFrame(Player player){
        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl";
        fgc = (FrameGrabbingControl) player.getControl(claseCtr);
        Buffer bufferFrame= fgc.grabFrame();
        BufferToImage bti;
        bti = new BufferToImage((VideoFormat)bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        return (BufferedImage) img;
    }
    
    /**
     * Método que inicia el proceso de la captura de una imagen de un video o webcam. Dicha imagen
     * la muestra en una nueva VentanaInternaImagen.
     * @param evt 
     */
    private void botonCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturaActionPerformed
        VentanaInternaJMFPlayer vv;
        VentanaInternaCamara vc;
        // Sólo se puede capturar imagenes de la ventana audio y cárama.
        // Compruebo si es de tipio cámara
        vv = this.getVentanaInternaVideo();
        vc = this.getVentanaInternaCamara();
        
        if(vv != null){ // De tipo video
            BufferedImage nueva = this.getFrame(vv.getPlayer());
            VentanaInternaImagen vi = VentanaInternaImagen.getInstance(nueva, this, "Captura Imagen");
            if(vi != null){ // Si la imagen ha sido creada correctamente.
                this.escritorio.add(vi);
                vi.setVisible(true);
                vi.setTitle("Captura Imagen*");
            }
        }
        else if(vc != null){ // Del tipo cámara
            BufferedImage nueva = this.getFrame(vc.getPlayer());
            VentanaInternaImagen vi = VentanaInternaImagen.getInstance(nueva, this, "Captura Imagen");
            if(vi != null){
                this.escritorio.add(vi);
                vi.setVisible(true);
                vi.setTitle("CapturaImagen*");
            }
        }
            
               
        
        
    }//GEN-LAST:event_botonCapturaActionPerformed

    /**
     * Método que activa/desactiva la barra de dibujo de figuras en la ventana principal.
     * @param evt 
     */
    private void verBarraDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraDibujoActionPerformed
        
        this.panelFormas.setVisible(this.verBarraDibujo.isSelected());
        this.panelAtributos.setVisible(this.verBarraDibujo.isSelected());
        this.panelColores.setVisible(this.verBarraDibujo.isSelected());
    }//GEN-LAST:event_verBarraDibujoActionPerformed

    /**
     * Método que activa/desactiva la barra de operaciones de imagenes de la ventana principal.
     * @param evt 
     */
    private void verBarraImagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraImagenesActionPerformed
        
        this.panelManipularImagenes.setVisible(this.verBarraImagenes.isSelected());
    }//GEN-LAST:event_verBarraImagenesActionPerformed

    /**
     * Método que activa/desactiva la barra de reproducción de la ventana principal.
     * @param evt 
     */
    private void verBarraReproduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraReproduccionActionPerformed
        
        // Opción ver barra de reproducción
        if(verBarraReproduccion.isSelected()){
            this.panelReproduccion.setVisible(true);
            // Si la barra de estado está activa
            if(this.panelEstado.isVisible()){

                this.panelInferior.setPreferredSize(new java.awt.Dimension(800, 60));
            }
            else{ // La barra de estado no está activa

                this.panelInferior.setPreferredSize(new java.awt.Dimension(800, 30));
            }
        }
        else{ // Desactivamos la barra de reproducción
            this.panelReproduccion.setVisible(false);
            // Si la barra de estado está activa
            if(this.panelEstado.isVisible()){

                this.panelInferior.setPreferredSize(new java.awt.Dimension(800, 30));
            }
            else{ // La barra de estado no está activa

                this.panelInferior.setPreferredSize(new java.awt.Dimension(0, 0));
            }  
        }
    }//GEN-LAST:event_verBarraReproduccionActionPerformed

    /**
     * Método que activa/desactiva la barra de estado de la ventana principal.
     * @param evt 
     */
    private void verBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraEstadoActionPerformed
        
        // Opción ver barra de estado
        if(verBarraEstado.isSelected()){
            this.panelEstado.setVisible(true);
            
            // Si la barra de reproducción está activa
            if(this.panelReproduccion.isVisible()){
                this.panelInferior.setPreferredSize(new java.awt.Dimension(800, 60));
            }
            else // La barra de reproducción no está activa
                this.panelInferior.setPreferredSize(new java.awt.Dimension(800, 30));
        }
        else{ // Desactivamos la barra de estado
            this.panelEstado.setVisible(false);
            // Si la barra de reproducción está activa
            if(this.panelReproduccion.isVisible())
                this.panelInferior.setPreferredSize(new java.awt.Dimension(800, 30));
            else // La barra de estado no está activa
                this.panelInferior.setPreferredSize(new java.awt.Dimension(0, 0));
            
        }
    }//GEN-LAST:event_verBarraEstadoActionPerformed

    /**
     * Método que activa/desactiva la linea discontinua de la ventana interna imagen
     * actual para la creación o edición de figuras.
     * @param evt 
     */
    private void botonLineaDiscontinuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaDiscontinuaActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        
        if(vi != null){
            if(vi.getLienzo().getAtributos() != null)
                vi.getLienzo().getAtributos().setLineaDiscontinua(botonLineaDiscontinua.isSelected());
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_botonLineaDiscontinuaActionPerformed

    /**
     * Método que muestra por pantalla la información de este programa.
     * @param evt 
     */
    private void botonAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAcercaDeActionPerformed
        VentanaAcercaDe vad = new VentanaAcercaDe(this, rootPaneCheckingEnabled);
        vad.setVisible(true);
    }//GEN-LAST:event_botonAcercaDeActionPerformed

    /**
     * Método que activa/desactiva la ventana de opciones para el degradado. El usuario
     * podrá elegir entre diferentes colores. Si el botón relleno no está activado, 
     * no muestra la ventana de selección de colores.
     * @param evt 
     */
    private void botonDegradadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDegradadoActionPerformed
        // Primero comprobamos si hay una ventana interna imagen abierta
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        if(vi != null){
            
            if(this.botonDegradado.isSelected() && this.botonRelleno.isSelected()){ // El usuario selecciona rellno degradado
                // Abrimos la ventana para la opción degradado
                OpcionDegradado opc = new OpcionDegradado(this, rootPaneCheckingEnabled);
                opc.setTitle("Elige dos colores para el relleno degradado.");
                opc.setVisible(true);

                if(opc.getAceptar()){ // Si el usuario ha pulsado aceptar
                    Color c1 = opc.getColor1();
                    Color c2 = opc.getColor2();
                    if(opc.getTipo() == OpcionDegradado.HORIZONTAL)
                        vi.getLienzo().getAtributos().setRellenoDegradado(true, c1, c2, false, vi.getLienzo().getAncho(), 0);
                    else
                        vi.getLienzo().getAtributos().setRellenoDegradado(true, c1, c2, true, 0, vi.getLienzo().getAlto());
                }
                else
                    this.botonDegradado.setSelected(false);
            }
            else{ // El usuario no quiere relleno degradado
                vi.getLienzo().getAtributos().setRellenoDegradado(false, null, null, true, 0, 0);
                this.botonDegradado.setSelected(false);
            }
            
            vi.getLienzo().repaint();
        }
        else
            this.botonDegradado.setSelected(false);
    }//GEN-LAST:event_botonDegradadoActionPerformed

    /**
     * Método que obtiene un duplicado de la imagen de la ventana interna imagen actual,
     * la almacena en una nueva ventana interna imagen y la muestra por pantalla.
     * @param evt 
     */
    private void botonDuplicarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDuplicarImagenActionPerformed
        VentanaInternaImagen vi = this.getVentanaInternaImagen();
        
        if(vi != null){
            
            VentanaInternaImagen nueva = VentanaInternaImagen.getInstance(vi.getLienzo().getImage(true), this, "Duplicado");
            
            if(nueva != null){
                nueva.setTitle("Duplicado*");
                this.escritorio.add(nueva);
                nueva.setVisible(true);
            }
            else
                JOptionPane.showMessageDialog(this.ventanaError,
                        "Error al crear la nueva imagen", "Error", JOptionPane.ERROR_MESSAGE);
            
            this.valoresPorDefecto();
        }
    }//GEN-LAST:event_botonDuplicarImagenActionPerformed

    /**
     * Método que recibe un punto y que dibuja en una barra de estado el punto
     * donde se encuentra el raton sobre una ventana interna imagen.
     * Me falta poner el color de la imagen.
     * @param p parámetro que recibe la coordenada donde se encuentra el ratón.
     */
    public void actualizaEstadoPixel(Point2D p, int rojo, int verde, int azul){
        
        this.pixelColor.setText(p.getX() + " , " + p.getY() + " Color ROJOxVERDExAZUL: " + rojo
        + "x" + verde + "x" + azul);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem botonAbrir;
    private javax.swing.JMenuItem botonAcercaDe;
    private javax.swing.JToggleButton botonAlisar;
    private javax.swing.JMenu botonArchivo;
    private javax.swing.JMenu botonAyuda;
    private javax.swing.JButton botonBarraAbrir;
    private javax.swing.JButton botonBarraGuardar;
    private javax.swing.JButton botonBarraNuevo;
    private javax.swing.JButton botonCamara;
    private javax.swing.JButton botonCaptura;
    private javax.swing.JToggleButton botonCurva;
    private javax.swing.JToggleButton botonDegradado;
    private javax.swing.JButton botonDuplicarImagen;
    private javax.swing.JToggleButton botonEditar;
    private javax.swing.JToggleButton botonElipse;
    private javax.swing.JButton botonEscalaIncrementar;
    private javax.swing.JButton botonEscalaReducir;
    private javax.swing.JComboBox<String> botonFiltro;
    private javax.swing.JToggleButton botonGrabar;
    private javax.swing.JMenuItem botonGuardar;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JToggleButton botonLineaDiscontinua;
    private javax.swing.JMenuItem botonNuevo;
    private javax.swing.JToggleButton botonPlay;
    private javax.swing.JToggleButton botonPoligono;
    private javax.swing.JToggleButton botonPunto;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JToggleButton botonRelleno;
    private javax.swing.ButtonGroup botonReproduccion;
    private javax.swing.JButton botonResta;
    private javax.swing.JButton botonSepia;
    private javax.swing.JToggleButton botonStop;
    private javax.swing.JButton botonSuma;
    private javax.swing.JToggleButton botonTransparencia;
    private javax.swing.JToggleButton colorAmarillo;
    private javax.swing.JToggleButton colorAzul;
    private javax.swing.JToggleButton colorBlanco;
    private javax.swing.JToggleButton colorNegro;
    private javax.swing.JToggleButton colorRojo;
    private javax.swing.JToggleButton colorVerde;
    private javax.swing.JComboBox<String> comboboxTransformaciones;
    private javax.swing.JButton contasteOscurecido;
    private javax.swing.JButton contrasteIluminado;
    private javax.swing.JButton contrasteNormal;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel estado;
    private javax.swing.ButtonGroup grupoColores;
    private javax.swing.ButtonGroup grupoFiguras;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem menuGrabarAudio;
    private javax.swing.JPanel panelAtributos;
    private javax.swing.JPanel panelBrillo;
    private javax.swing.JPanel panelColores;
    private javax.swing.JPanel panelContraste;
    private javax.swing.JPanel panelContrasteYEscala;
    private javax.swing.JPanel panelEscala;
    private javax.swing.JPanel panelEstado;
    private javax.swing.JPanel panelFiltro;
    private javax.swing.JPanel panelFiltroYSepia;
    private javax.swing.JPanel panelFormas;
    private javax.swing.JPanel panelGiro;
    private javax.swing.JPanel panelGrabar;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelManipularImagenes;
    private javax.swing.JPanel panelOperaciones;
    private javax.swing.JPanel panelOperacionesFichero;
    private javax.swing.JPanel panelReporducirParar;
    private javax.swing.JPanel panelReproduccion;
    private javax.swing.JPanel panelSepia;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JPanel panelTransformaciones;
    private javax.swing.JPanel panelUmbralizacion;
    private javax.swing.JLabel pixelColor;
    private javax.swing.JSlider sliderBinario;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderUmbralizacion;
    private javax.swing.JSpinner spinnerGrosor;
    private javax.swing.JOptionPane ventanaEleccionTam;
    private javax.swing.JOptionPane ventanaError;
    private javax.swing.JMenu ver;
    private javax.swing.JCheckBoxMenuItem verBarraDibujo;
    private javax.swing.JCheckBoxMenuItem verBarraEstado;
    private javax.swing.JCheckBoxMenuItem verBarraImagenes;
    private javax.swing.JCheckBoxMenuItem verBarraReproduccion;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
