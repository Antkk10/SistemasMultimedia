/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinal;

import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import sm.AMFC.iu.Lienzo2DImagen;

/**
 * Clase que hereda de VentanaInterna y que contiene una imagen con la que podremos
 * realizar operaciones y dibujar figuras. Tiene funcionalidad para almacenar la imagen
 * a mostrar, un método para devolver un objeto de tipo Lienzo2D en el cual es 
 * donde se podrá visualizar la imagen y realizar las operaciones. Además envia a
 * la ventana principal las coordenadas donde se encuentra el ratón.
 * 
 * @author Antonio Manuel Fernández Cantos
 */
public class VentanaInternaImagen extends VentanaInterna{

    /**
     * Constructor de la clase, obtiene la imagen del archivo pasado como parámetro,
     * almacena la instancia del objeto que está creando una instancia de esta clase que
     * en este caso es VentanaPrincipal. Por último almacena el nombre de la imagen abierta.
     * En caso de que no pueda abrir la imagen, inicializa el lienzo a null.
     */
    private VentanaInternaImagen(File f, VentanaPrincipal v, String nombre) {
        super(v, VentanaInterna.IMAGEN, nombre);
        initComponents();
        try {
            BufferedImage img = ImageIO.read(f);
            this.lienzo.setImage(img);
        } catch (IOException ex) {
            lienzo = null;
        }
        
    }
    
    /**
     * Constructor de la clase, obtiene la imagen,
     * almacena la instancia del objeto que está creando una instancia de esta clase que
     * en este caso es VentanaPrincipal. Por último almacena el nombre de la imagen abierta.
     */  
    private VentanaInternaImagen(BufferedImage img, VentanaPrincipal v, String nombre){
        super(v, VentanaInterna.IMAGEN, nombre);
        initComponents();
        this.lienzo.setImage(img);
    }
    
    /**
     * Método de clase que crea y devuelve un objeto de esta clase.
     * @param f es el fichero en el que está contenida la imagen.
     * @param v corresponde a la ventana principal que está creando esta ventana.
     * @param nombre corresponde con el nombre del fichero.
     * @return Devuelve el objeto creado. Si el objeto no ha sido creado correctamente
     * devuelve null.
     */  
    public static VentanaInternaImagen getInstance(File f, VentanaPrincipal v, String nombre){
        VentanaInternaImagen vi = new VentanaInternaImagen(f, v, nombre);
        
        if(vi.lienzo != null) // Imagen almacenada
            return vi;
        else
            return null;
    }
    /**
     * Método de clase que crea y devuelve un objeto de esta clase.
     * @param img la imagen a mostrar en la ventana.
     * @param v corresponde a la ventana principal que está creando esta ventana.
     * @param nombre corresponde con el nombre del fichero.
     * @return Devuelve el objeto creado. Si el objeto no ha sido creado correctamente devuelve null.
     */
    public static VentanaInternaImagen getInstance(BufferedImage img, VentanaPrincipal v, String nombre){
        VentanaInternaImagen vi = new VentanaInternaImagen(img, v, nombre);
        
        if(vi.lienzo != null)
            return vi;
        else
            return null;
    }
    
    /**
     * 
     * @return Devuelve el nombre de la imagen. De tipo string.
     */
    @Override
    public String getNombre(){
        return this.nombre;
    }
    
    /**
     * Almacena el nombre de la imagen.
     * @param n contiene el nombre a almacenar.
     */
    @Override
    public void setNombre(String n){
        this.nombre = n;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        lienzo = new sm.AMFC.iu.Lienzo2DImagen();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        lienzo.setBackground(new java.awt.Color(204, 204, 204));
        lienzo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lienzoMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout lienzoLayout = new javax.swing.GroupLayout(lienzo);
        lienzo.setLayout(lienzoLayout);
        lienzoLayout.setHorizontalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );
        lienzoLayout.setVerticalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        scroll.setViewportView(lienzo);

        getContentPane().add(scroll);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que envía un mensaje a la ventana principal para que actualice
     * el estado de los botones en función de los atributos actuales que contiene
     * el lienzo.
     * @param evt 
     */
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        this.vp.actualizaValoresVentanaImagen(this);
        
    }//GEN-LAST:event_formInternalFrameActivated

    /**
     * Evento que se genera cuando el ratón está encima del lienzo, envia las coordenadas
     * donde se encuentra a la VentanaPrincipal. Si el ratón no está en una zona donde
     * no se pueda dibujar, no se envian las coordenadas a la ventana principal.
     * @param evt 
     */
    private void lienzoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienzoMouseMoved
        Point2D p = evt.getPoint(); // Punto donde se encuentra el raton
        int columna = (int) p.getX();
        int fila = (int) p.getY();
        // Comprobamos si el punto está dentro de la zona de dibujado
        if(columna < this.lienzo.getAncho() && fila < this.lienzo.getAlto()){
            // Devuelve el color en forma de entero
            
            
            Color color = new Color(this.lienzo.getImage().getRGB(columna, fila));
            int rojo = color.getRed();
            int verde = color.getGreen();
            int azul = color.getBlue();
            
            // Enviamos a la ventana principal las coordenadas donde se encuentra el ratón
            this.vp.actualizaEstadoPixel(evt.getPoint(), rojo, verde, azul);
        }
    }//GEN-LAST:event_lienzoMouseMoved

    
    /**
     * Método que devuelve el tipo de VentanaInterna que es la clase, en este caso es 
     * una VentanaInternaImagen.
     * @return un entero indicando el tipo de VentanaInterna.
     */
    @Override
    public int getTipo(){
        return VentanaInterna.IMAGEN;
    }
    

    /**
     * Este método devuelve la instancia lienzo de la clase Lienzo2DImagen
     * @return Devuelve un objeto de tipo Lienzo2DImagen
     */
    public Lienzo2DImagen getLienzo(){
        return this.lienzo;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sm.AMFC.iu.Lienzo2DImagen lienzo;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables
}
