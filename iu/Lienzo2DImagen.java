/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.AMFC.iu;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 * Clase Lienzo2DImagen que hereda de Lienzo2D y que tiene la funcionalidad necesaria
 * para almacenar y representar en un lienzo una imagen.
 * 
 * @author Antonio Manuel Fernández Cantos
 */
public class Lienzo2DImagen extends Lienzo2D {

    /**
     * Almacena la imagen a representar.
     */
    private BufferedImage imagen;
    /**
     * Constructor de la clase que inicializa los valores por defecto.
     */
    public Lienzo2DImagen() {
        super();
        initComponents();
        this.imagen=null;
        
    }
    
    /**
     * Método que almacena una imagen pasado por parámetro.
     * @param img imagen a almacenar.
     */
    public void setImage(BufferedImage img){
        this.imagen=img;
        if(img!=null) {
            // Obtenemos el ancho y alto de la imagen.
            setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
            this.ancho = img.getWidth();
            this.alto = img.getHeight();
        }
    }
    /**
     * 
     * @return Devuelve la imagen almacenada. 
     */
    public BufferedImage getImage(){
        return this.imagen;
    }
    
    /**
     * Devuelve la imagen almacenada. En caso de recibir como verdadero el parámetro, copia la imagen
     * almacenada y la devuelve.
     * @param drawImg indica si se copia o se devuelve la imagen.
     * @return Devuelve la imagen actual o copiada.
     */
    public BufferedImage getImage(boolean drawImg){
        if (drawImg) {
            
            BufferedImage img = new BufferedImage(this.imagen.getWidth(), this.imagen.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d = img.createGraphics();
            
            paint(g2d);
            
            return img;
                    
        } else
            return getImage();
    }
    
    /**
     * Método que dibuja la imagen sobre el lienzo.
     * @param g donde se dibuja la imagen. 
     */
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        if(this.imagen != null) 
            g.drawImage(this.imagen, 0, 0, this);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
