/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinal;

import java.awt.Component;
import java.io.File;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.Player;

/**
 * Clase VentanaInternaJMFPlayer que hereda de VentanaInterna y que su función es 
 * almacenar un video para mostrarlo por la ventana. Contiene métodos para poder cerrar la ventana,
 * reproducir el video y parar.
 * Muestra en la ventana el tiempo total de reproducción, los segundos por donde está
 * reproduciendose y una barra de progreso.
 * @author Antonio Manuel Fernández Cantos
 */
public class VentanaInternaJMFPlayer extends VentanaInterna {

    /**
     * Atributo de tipo Player que almacena el video para reproducir y que contiene
     * los métodos necesarios para darle funcionalidad.
     */
    private Player player;

    /**
     * Constructor de la clase que da forma a los atributos.
     * @param vp de tipo VentanaPrincipal, almacena la instancia que contiene
     * una instancia de esta ventana y que la usaremos para actualizar los botones
     * de la ventana principal.
     * @param f Contiene el archivo de audio a almacenar y poder realizar
     * operaciones de audio sobre el.
     * @param nombre corresponde al nombre del audio que se está reproduciendo en esta
     * ventana.
     */
    private VentanaInternaJMFPlayer( File f, VentanaPrincipal vp, String nombre) {
        super(vp, VentanaInterna.VIDEO, nombre);
        initComponents();
        String sfichero = "file:" + f.getAbsolutePath();
        MediaLocator ml = new MediaLocator(sfichero);
        try {
            player = Manager.createRealizedPlayer(ml);
            Component vc = player.getVisualComponent();
            if(vc!=null)
                add(vc, java.awt.BorderLayout.CENTER);
            
            Component cpc = player.getControlPanelComponent();
            if(cpc!=null)
                add(cpc, java.awt.BorderLayout.SOUTH);
            this.pack();
        }catch(Exception e) {
            System.err.println("VentanaInternaJMFPlayer: "+e);
            player = null;
        }
    }
    
    /**
     * Método de clase en el cual crea y devuelve una instancia de esta clase. 
     * @param f de tipo File, contiene el archivo de audio a almacenar.
     * @param vp de tipo VentanaPrincipal, contiene la instancia que está crenado un objeto
     * de esta clase.
     * @param nombre de tipo string, contiene el nombre del archivo de audio.
     * @return Devuelve un objeto inciailizado de esta clase. En el caso de que no se pueda
     * crear correctamente la instancia devuelve null.
     */
    public static VentanaInternaJMFPlayer getInstance(File f, VentanaPrincipal vp, String nombre){
        VentanaInternaJMFPlayer v = new VentanaInternaJMFPlayer(f, vp, nombre);
        
        // Si el fichero ha sido almacenado correctamente enviamos la instancia
        if(v.player != null)
            return v;
        else
            return null;
    }
    
    /**
     * 
     * @return Devuelve el contenido del atributo player.
     */
    public Player getPlayer(){
        return this.player;
    }
    
    /**
     * 
     * @return Devuelve el nombre del archivo de audio.
     */
    @Override
    public String getNombre(){
        return this.nombre;
    }
    
    /**
     * Almacena el nombre del audio.
     * @param n contiene el nombre del audio a almacenar.
     */
    @Override
    public void setNombre(String n){
        this.nombre = n;
    }   
    /**
     * Método que reproduce el video mostrado en la Ventana.
     */
    public void play() {
        if (player != null) {
            try {
                player.start();
            } catch (Exception e) {
                System.err.println("VentanaInternaJMFPlayer: "+e);
            }
        }
    }
    
    /**
     * Método que para la reproducción del video.
     */
    public void close(){
        if(player != null){
            try{
                player.close();
            }catch (Exception e){
                System.err.println("VentanaInternaJMFPlayer: " + e);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que para la reproducción del video cuando la ventana es cerrada
     * por el usuario.
     * @param evt 
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        close();
    }//GEN-LAST:event_formInternalFrameClosing

    /**
     * 
     * @return Devuelve el tipo de ventana interna.
     */
    @Override
    public int getTipo() {
         return this.tipo;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
